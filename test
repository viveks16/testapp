package com.telstra.ews;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.FileNameMap;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Files;

import javax.activation.MimetypesFileTypeMap;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


@RestController
public class DownloadFileController {
	
	@Autowired
	Environment env;
	
//	@RequestMapping (path = "/download", method=RequestMethod.GET)
//	public ResponseEntity<Resource> getFiles(HttpServletRequest request, HttpServletResponse response)
	@RequestMapping ("/download")
	public void getFiles(HttpServletRequest request, HttpServletResponse response) {
		
		String filePath = env.getProperty("filePath");
		String mimeType = "";
		System.out.println(filePath);
		
		File fileObj = new File(filePath);
		
		boolean fileExists = findFiles(fileObj);
		String fileType = "Undetermined";
		
		if(fileExists)
		{
			if(fileObj.isFile())
			{
				
//				System.out.println(FileUtils.getMimeType("file://c:/temp/test.TXT"));
				
//				  FileNameMap fileNameMap = URLConnection.getFileNameMap();
//			      String type = fileNameMap.getContentTypeFor(filePath);

			      try {
					fileType = Files.probeContentType(fileObj.toPath());
					System.out.println(fileType);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			      
			      
			    		  
//				mimeType = (new MimetypesFileTypeMap().getContentType(fileObj));
				
//				mimeType = setContentType(fileObj);
//				String type = null;
//				URL u = null;
//				try {
//					u = new URL(filePath);
//				} catch (MalformedURLException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//			    URLConnection uc = null;
//			    try {
//					uc = u.openConnection();
//				} catch (IOException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//			    type = uc.getContentType();
//			    System.out.println(type);
			}
		}
		
		response.setContentType(fileType);
		
		response.setHeader("Content-Disposition", String.format("attachment; filename=\"" + fileObj.getName() + "\""));

		response.setContentLength((int) fileObj.length());

		InputStream inputStream = null;
		
		try {
			inputStream = new BufferedInputStream(new FileInputStream(fileObj));
		} catch (FileNotFoundException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}

		try {
			FileCopyUtils.copy(inputStream, response.getOutputStream());
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
					
//		HttpHeaders headers = new HttpHeaders();
//		headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment");
//		
//		InputStreamResource resource = null;
//		try {
//			resource = new InputStreamResource(new FileInputStream(fileObj));
//		} catch (FileNotFoundException e) {
//			e.printStackTrace();
//		}
//				
//		return ResponseEntity.ok()
//	            .headers(headers)
//	            .contentLength(fileObj.length())
//	            .contentType(MediaType.parseMediaType(fileType))
//	            .body(resource);
	}
	
	
	private String setContentType(File file) {
		
		String contentType="";
		
		String mimeType = URLConnection.guessContentTypeFromName(file.getName()); 
		if(mimeType == null)
			contentType = "application/octet-stream";
			
		return contentType;
	}
	
	private boolean findFiles(File fileObj) {
		
		boolean val = false;
		if(fileObj.exists()) {
			val = true;
		}
		else {
			val = false;
		}
			
		return val;
	}	
	
}
